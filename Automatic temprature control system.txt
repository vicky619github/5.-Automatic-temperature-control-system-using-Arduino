#include "arduino_secrets.h"
// DHT sensor library - Version: Latest 
#include <DHT.h>
#include <DHT_U.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "IoT-Cloud-Temp-Control-Thing"
  https://create.arduino.cc/cloud/things/822b2632-55e9-43fb-bc24-373f379c20df 
  Arduino IoT Cloud Properties description
  The following variables are automatically generated and updated when changes are made to the Thing properties
  bool fan_on;
  float temperature;
  float max_temp;
  bool override_fan_control;
  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//Constants
#define DHTPIN 7 // pin DHT-22 OUT/Signal is connected to
#define DHTTYPE DHT22 // DHT 22 
DHT dht(DHTPIN, DHTTYPE);  // Create the DHT object

#define fan 6  // transistor base resistor  connected to pin 6 on the MKR board
#define default_max_temp 30

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //Initialize
  dht.begin();
  pinMode(fan, OUTPUT);
  digitalWrite(fan, LOW); //turn fan off
  if(max_temp == NULL) {
    max_temp = default_max_temp; // setting a default value if one is not set
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  //Read temperature data and set the temperature variable
  temperature = dht.readTemperature();
  //Print values to the serial monitor
  Serial.print("Temp: ");
  Serial.print(temperature);
  Serial.println(" Celcius");
  
  //Control fan or regulate temperature based on user input settings
  update_system();
  
  delay(5000); //delay for 5 seconds
  
  
}


void regulate_temperature() {
  //check temp setting
  if(temperature > max_temp) {
    //turn fan on
    digitalWrite(fan, HIGH);
    fan_on = true;
  } else {
    //turn fan off
    digitalWrite(fan, LOW);
    fan_on = false;
  }
}

void turn_fan_on_off() {
  //turn fan on/off based on value set
  if (fan_on) {
    digitalWrite(fan, HIGH); //turn fan on
  } else {
    digitalWrite(fan, LOW); //turn fan off
  }
}

void update_system() {
  //is override enabled
  if (override_fan_control) {
    turn_fan_on_off();
  } else {
    //manual override not set
    regulate_temperature();
  }
}


void onMaxTempChange() {
  regulate_temperature();
}


void onOverrideFanControlChange() {
  update_system();
}


void onFanOnChange() {
  update_system();
}
